#!/bin/bash
# Bash wrappers for containers run commands

. ~/.containers.rc

RUNTIME=${RUNTIME:-podman}

#
# Helper Functions
#
dcleanup(){
    ${RUNTIME} rm -v $(${RUNTIME} ps --filter status=exited -q 2>/dev/null) 2>/dev/null
    ${RUNTIME} rmi $(${RUNTIME} images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

del_stopped(){
    local name=$1
    local state=$(${RUNTIME} inspect --format "{{.State.Running}}" $name 2>/dev/null)

    if [[ "$state" == "false" ]]; then
        ${RUNTIME} rm $name
    fi
}

is_running(){
    local name=$1
    local state=$(${RUNTIME} inspect --format "{{.State.Running}}" $name 2>/dev/null)
    
    if [[ "$state" == "true" ]]; then
        return 0
    else
        return -1
    fi
}

relies_on(){
    local containers=$@

    for container in $containers; do
        local state=$(${RUNTIME} inspect --format "{{.State.Running}}" $container 2>/dev/null)

        if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
            echo "$container is not running, starting it for you."
            $container
        fi
    done
}

get_default_addr(){
    ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}'
}

bailout(){
    echo $@
}

apachephp(){
    local name=apachephp
    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name

    ${RUNTIME} run -it --rm --name $name -p 8080:80 -v `pwd`:/var/www/html/:Z php:7.0-apache
}

pdns() {
    local name=pdns
    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    if [ ! -f ${PDNS_DB} ]; then
        echo "DB ${PDNS_DB} not found, creating.."
        mkdir $(dirname ${PDNS_DB})
        touch ${PDNS_DB}
        echo "..done"
    fi
    del_stopped $name

    ${RUNTIME} run -it --name $name -e API_KEY=MySecretKey -e WEB_PORT=8081 -v ${PDNS_DB}:/data/pdns.db:Z -p 8081:8081 -p 53:53 -p 53:53/udp pbertera/${name}
}

pdns.py(){
    relies_on pdns
    ${RUNTIME} exec -it pdns pdns.py "$@"
}

sox() {
    local name=sox
    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name

    ${RUNTIME} run --rm -it -v `pwd`:/tmp:Z pbertera/ffmpeg-sox sox $@ 
}

ffmpeg() {
    local name=ffmpeg
    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name

    ${RUNTIME} run --rm -it -v `pwd`:/tmp:Z pbertera/ffmpeg-sox ffmpeg $@
}

nginx() {
    local name=nginx
    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    ${RUNTIME} run -it -v ${NGINX_HOME}/server.conf:/etc/nginx/conf.d/default.conf:ro \
        -v ${NGINX_HOME}/certs/:/etc/nginx/certs:ro \
        -v ${NGINX_HOME}/nginx-www/:/var/www:Z \
        -v ${NGINX_HOME}/nginx-www-ssl/:/var/www-ssl:Z -p 8443:443 -p 80:80 nginx:latest
}

sipp(){
    local name=sipp

    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    ${RUNTIME} run -it --rm --name sipp -v $(PWD):/data:Z pbertera/sipp $@
}

text2pcap(){
    local name=text2pcap

    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    ${RUNTIME} run -it --rm --name $name -v $(PWD):/data:Z pbertera/$name $@
}

asciidoctor(){
    local name=asciidoctor

    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    ${RUNTIME} run -it --rm --name $name -v $(PWD):/data:Z pbertera/$name $@
}

sngrep(){
    local name=sngrep

    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    ${RUNTIME} run -it --rm --name ${name} -v $(PWD):/data:Z pbertera/${name} $@
}


convert(){
    local name=convert
    
    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    ${RUNTIME} run -it --rm --name convert -v $(PWD):/data:Z pbertera/imagemagick $@
}

mz(){
    local name=mz

    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    ${RUNTIME} run --rm -it --name ${name} pbertera/${name} $@

}

hping3(){
    local name=hping3

    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    ${RUNTIME} run --rm -it --name ${name} pbertera/${name} $@

}

netperf(){
    local name=netperf

    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    ${RUNTIME} run --rm -it --name ${name} pbertera/netperf client $@
}

netserver(){
    local name=netserver

    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    ${RUNTIME} run --rm -it --name ${name} pbertera/netperf server $@
}

easy-rsa(){
    local name=easy-rsa
    local env_file=""

    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    if [ ! -d "$EASY_RSA_PKI" ]; then
        mkdir -p "$EASY_RSA_PKI"
        echo EASYRSA_SSL_CONF=/er/openssl-easyrsa.cnf > "$EASY_RSA_PKI/vars"
    fi
    if [ -f "$EASY_RSA_PKI/vars" ]; then
        env_file="--env-file $EASY_RSA_PKI/vars"
    fi
    # EASY_RSA_PKY must be a full path
    ${RUNTIME} run --rm -it -v $EASY_RSA_PKI:/easy-rsa:Z ${env_file} --name ${name} pbertera/easy-rsa $@
    echo "Easy rsa root dir is $EASY_RSA_PKI"
}

easy-rsa-root(){
    local name=easy-rsa-root
    local env_file=""

    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name
    if [ ! -d "$EASY_RSA_ROOT_PKI" ]; then
        mkdir -p "$EASY_ROOT_RSA_PKI"
        echo EASYRSA_SSL_CONF=/er/openssl-easyrsa.cnf > "$EASY_RSA_ROOT_PKI/vars"
    fi

    if [ -f "$EASY_RSA_ROOT_PKI/vars" ]; then
        env_file="--env-file $EASY_RSA_ROOT_PKI/vars"
    fi
    # EASY_RSA_PKY must be a full path
    ${RUNTIME} run --rm -it -v $EASY_RSA_ROOT_PKI:/easy-rsa:Z ${env_file} --name ${name} pbertera/easy-rsa $@
    echo "Easy rsa root dir is $EASY_RSA_ROOT_PKI"
}

nmap(){
    local name=nmap

    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name

    ${RUNTIME} run --rm -it --name ${name} pbertera/${name} $@ 
}

syslog(){
    local name=syslog
    if [[ -z $CONTAINER_BIND_ADDR ]]; then
        ip=$(get_default_addr)
    else
        ip=$CONTAINER_BIND_ADDR
    fi
    
    if is_running $name; then 
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name

    # Remove the NAT rules
    #${RUNTIME}-machine-fwd -d ${name}_http >/dev/null 2>&1
    #${RUNTIME}-machine-fwd -d ${name}_syslog >/dev/null 2>&1
    
    ${RUNTIME} run -d\
        -e SYSLOG_USERNAME=admin\
        -e SYSLOG_PASSWORD=1234\
        -p 1080:80\
        -p 514:514/udp\
        --name=syslog\
        pbertera/syslogserver $@
    
    # NAT the local port 1080 to the container:80
    #${RUNTIME}-machine-fwd -i $ip -h 1080 -n ${name}_http 1080
    #${RUNTIME}-machine-fwd -i $ip -h 1514 -n ${name}_syslog -p udp 514
    
    echo "===================================================="
    echo "== Container name: $name                          =="
    echo "== Web GUI Username: admin                        =="
    echo "== Web GUI Password: 1234                         =="
    echo "== Listening on:                                  =="
    echo "==     HTTP:    http://$ip:1080                   =="
    echo "==     SYSLOG:  $ip:1514/udp                      =="
    echo "==     Logfile: http://$ip:1080/syslog.log        =="
    echo "===================================================="
}

syslogtail(){
    relies_on syslog
    ${RUNTIME} exec -it syslog tail -f /var/log/net/syslog.log
}

ldap(){
    local name=ldap
    if [[ -z $CONTAINER_BIND_ADDR ]]; then
        ip=$(get_default_addr)
    else
        ip=$CONTAINER_BIND_ADDR
    fi
    
    if is_running $name; then 
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name

    # Remove the NAT rules
    #${RUNTIME}-machine-fwd -d ${name}_http >/dev/null 2>&1
    #${RUNTIME}-machine-fwd -d ${name}_ldap >/dev/null 2>&1
    
    ${RUNTIME} run -d\
        -e LDAP_DOMAIN=example.com\
        -e LDAP_ORGANISATION="My Mega Corporation"\
        -e LDAP_ROOTPASS=1234\
        -p 1081:80\
        -p 1389:389\
        --name=$name\
        pbertera/ldapserver $@
    
    # NAT the local port 1080 to the container:80
    #${RUNTIME}-machine-fwd -i $ip -h 1081 -n ${name}_http 1081
    #${RUNTIME}-machine-fwd -i $ip -h 1389 -n ${name}_ldap 389
    
    echo "===================================================="
    echo "== Container name: ldap                           =="
    echo "== LDAP domain: example.com                       =="
    echo "== LDAP admin password: 1234                      =="
    echo "== Listening on:                                  =="
    echo "==     HTTP:      http://$ip:1081/tcp             =="
    echo "==     LDAP:      $ip:389/tcp                     =="
    echo "===================================================="
}

irssi(){
    local name=irssi
    
    if is_running $name; then 
        bailout "Container $name is already running"
        return
    fi
    
    del_stopped $name

    ${RUNTIME} run -it --name irssi -e TERM --rm --log-driver=none \
        -v $HOME/.irssi:/home/user/.irssi:rw,Z irssi
}

asterisk(){
    local name=asterisk
    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    del_stopped $name

    ${RUNTIME} run -it --network host -v ${HOME}/.asterisk:/etc/asterisk:Z -p 5060:5060/udp -p 10000-10010:10000-10010/udp pbertera/asterisk $@
}

termshark(){
    local name=termshark
    if is_running $name; then
        bailout "Container $name is already running"
        return
    fi

    ${RUNTIME} run -it --privileged --net host pbertera/termshark

    del_stopped $name
}
